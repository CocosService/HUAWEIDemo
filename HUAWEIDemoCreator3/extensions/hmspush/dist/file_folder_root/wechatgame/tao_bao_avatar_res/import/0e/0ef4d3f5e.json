[1,["87gUjFomxPdaLFZdjZthvA@6c48a","8a6ewXms5FmbFVhTzo+U/7"],["u_albedo_map","_effectAsset"],[["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.EffectAsset",["_name","combinations","shaders","techniques"],-1]],[[0,0,1,2,3,4],[1,0,1,2,3,5]],[[[[0,"metallic_texture_merge",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"u_position_ST",8,[2,0,0,0,0],"u_texture0_ST",8,[2,0,0,0,0],"u_texture1_ST",8,[2,0,0,0,0],"u_texture2_ST",8,[2,0,0,0,0],"u_texture2_color1",8,[4,4147314],"u_texture3_ST",8,[2,0,0,0,0],"u_albedo_map",6,0]],11]]],0,0,[0,0],[0,1],[0,1]],[[[1,"../sdk/res/mat/texture_merge",[{}],[{"hash":2529698234,"name":"../sdk/res/mat/texture_merge|textureMerge-vs:vert|textureMerge-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"u_TilingOffset","type":16,"count":1},{"name":"u_position_ST","type":16,"count":1},{"name":"u_texture0_ST","type":16,"count":1},{"name":"u_texture1_ST","type":16,"count":1},{"name":"u_texture2_ST","type":16,"count":1},{"name":"u_texture3_ST","type":16,"count":1},{"name":"u_texture4_ST","type":16,"count":1},{"name":"u_texture5_ST","type":16,"count":1},{"name":"u_texture6_ST","type":16,"count":1},{"name":"u_texture0_color1","type":16,"count":1},{"name":"u_texture0_color2","type":16,"count":1},{"name":"u_texture1_color1","type":16,"count":1},{"name":"u_texture1_color2","type":16,"count":1},{"name":"u_texture2_color1","type":16,"count":1},{"name":"u_texture2_color2","type":16,"count":1},{"name":"u_texture3_color1","type":16,"count":1},{"name":"u_texture3_color2","type":16,"count":1},{"name":"u_texture4_color1","type":16,"count":1},{"name":"u_texture4_color2","type":16,"count":1},{"name":"u_texture5_color1","type":16,"count":1},{"name":"u_texture5_color2","type":16,"count":1},{"name":"u_texture6_color1","type":16,"count":1},{"name":"u_texture6_color2","type":16,"count":1},{"name":"u_HSV_offset","type":16,"count":1},{"name":"u_eyelight_follow","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"u_albedo_map","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]},{"name":"u_texture0","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["TEXTURE0"]},{"name":"u_texture1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["TEXTURE1"]},{"name":"u_texture2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["TEXTURE2"]},{"name":"u_texture3","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["TEXTURE3"]},{"name":"u_texture4","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["TEXTURE4"]},{"name":"u_texture5","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["TEXTURE5"]},{"name":"u_texture6","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["TEXTURE6"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]},{"name":"a_Color","format":44,"location":16,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"u_TilingOffset","type":16,"count":1},{"name":"u_position_ST","type":16,"count":1},{"name":"u_texture0_ST","type":16,"count":1},{"name":"u_texture1_ST","type":16,"count":1},{"name":"u_texture2_ST","type":16,"count":1},{"name":"u_texture3_ST","type":16,"count":1},{"name":"u_texture4_ST","type":16,"count":1},{"name":"u_texture5_ST","type":16,"count":1},{"name":"u_texture6_ST","type":16,"count":1},{"name":"u_texture0_color1","type":16,"count":1},{"name":"u_texture0_color2","type":16,"count":1},{"name":"u_texture1_color1","type":16,"count":1},{"name":"u_texture1_color2","type":16,"count":1},{"name":"u_texture2_color1","type":16,"count":1},{"name":"u_texture2_color2","type":16,"count":1},{"name":"u_texture3_color1","type":16,"count":1},{"name":"u_texture3_color2","type":16,"count":1},{"name":"u_texture4_color1","type":16,"count":1},{"name":"u_texture4_color2","type":16,"count":1},{"name":"u_texture5_color1","type":16,"count":1},{"name":"u_texture5_color2","type":16,"count":1},{"name":"u_texture6_color1","type":16,"count":1},{"name":"u_texture6_color2","type":16,"count":1},{"name":"u_HSV_offset","type":16,"count":1},{"name":"u_eyelight_follow","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"u_albedo_map","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]},{"name":"u_texture0","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["TEXTURE0"]},{"name":"u_texture1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["TEXTURE1"]},{"name":"u_texture2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["TEXTURE2"]},{"name":"u_texture3","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["TEXTURE3"]},{"name":"u_texture4","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["TEXTURE4"]},{"name":"u_texture5","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["TEXTURE5"]},{"name":"u_texture6","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["TEXTURE6"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_composite_pack_1","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_composite_pack_2","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_composite_pack_3","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCShadow","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matLightView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matLightViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_shadowInvProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjDepthInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowProjInfo","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_shadowNFLSInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowWHPBInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowLPNNInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_shadowColor","typename":"vec4","type":16,"count":1,"precision":"lowp "},{"name":"cc_planarNDInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCSM","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_csmViewDir0","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir1","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmViewDir2","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmAtlas","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_matCSMViewProj","typename":"mat4","type":25,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjDepthInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmProjInfo","typename":"vec4","type":16,"count":4,"precision":"highp ","isArray":true},{"name":"cc_csmSplitsInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":17,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":17,"tags":{"builtin":"global"},"defines":["CC_RECEIVE_SHADOW"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON)\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp mat4 cc_matViewProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nmat4 matWorld;\nmat4 matWorldIT;\nvec4 TransformObjectToWorld(vec4 localPos)\n{\n    vec4 wsPos = matWorld * localPos;\n    return wsPos;\n}\nvec4 TransformWorldToHClip(vec4 wsPos)\n{\n    return cc_matViewProj* wsPos;\n}\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if CC_USE_FOG != 4\n#endif\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvarying highp vec4 v_shadowPos;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    varying vec3 v_luv;\n#endif\nattribute vec4 a_Color;\nvarying vec2 v_Texcoord0;\n#if CC_RECEIVE_SHADOW\n    varying mediump vec2 v_shadowBias;\n#endif\nvec4 eyeLitVert()\n{\n    StandardVertInput In; CCVertInput(In); CCGetWorldMatrixFull(matWorld, matWorldIT);\n    vec4 wsPos=TransformObjectToWorld(In.position);\n    v_Texcoord0= a_texCoord;\n    return TransformWorldToHClip(wsPos);\n}\nvec4 vert ()\n{\n  return eyeLitVert();\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n         uniform vec4 u_texture0_ST;\n       uniform vec4 u_texture1_ST;\n       uniform vec4 u_texture2_ST;\n       uniform vec4 u_texture3_ST;\n       uniform vec4 u_texture4_ST;\n       uniform vec4 u_texture5_ST;\n       uniform vec4 u_texture6_ST;\n       uniform vec4 u_texture0_color1;\n       uniform vec4 u_texture0_color2;\n       uniform vec4 u_texture1_color1;\n       uniform vec4 u_texture1_color2;\n       uniform vec4 u_texture2_color1;\n       uniform vec4 u_texture2_color2;\n       uniform vec4 u_texture3_color1;\n       uniform vec4 u_texture3_color2;\n       uniform vec4 u_texture4_color1;\n       uniform vec4 u_texture4_color2;\n       uniform vec4 u_texture5_color1;\n       uniform vec4 u_texture5_color2;\n       uniform vec4 u_texture6_color1;\n       uniform vec4 u_texture6_color2;\n       uniform vec4 u_HSV_offset;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    #endif\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON)\n  #if CC_RECEIVE_SHADOW\n    uniform highp sampler2D cc_shadowMap;\n    uniform highp sampler2D cc_spotShadowMap;\n    #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    #else\n    #endif\n  #endif\n  varying highp vec4 v_shadowPos;\n    #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n  #endif\n  #if CC_USE_FOG != 4\n  #endif\n  #if !CC_USE_ACCURATE_FOG\n  varying mediump float v_fog_factor;\n  #endif\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n      varying vec3 v_luv;\n      uniform sampler2D cc_lightingMap;\n  #endif\n  varying vec2 v_Texcoord0;\nuniform sampler2D u_albedo_map;\n#if TEXTURE0\n    uniform sampler2D u_texture0;\n#endif\n#if TEXTURE1\n    uniform sampler2D u_texture1;\n#endif\n#if TEXTURE2\n    uniform sampler2D u_texture2;\n#endif\n#if TEXTURE3\n    uniform sampler2D u_texture3;\n#endif\n#if TEXTURE4\n    uniform sampler2D u_texture4;\n#endif\n#if TEXTURE5\n    uniform sampler2D u_texture5;\n#endif\n#if TEXTURE6\n    uniform sampler2D u_texture6;\n#endif\n#if HSVOFFSET\n    vec3 HSV2RGB_taobao(vec3 c)\n    {\n        vec4 k = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n        return c.z * mix(k.xxx, clamp(abs(fract(c.xxx + k.xyz) * 6.0 - k.www) - k.xxx, 0.0, 1.0), c.y);\n    }\n    vec3 RGB2HSV_taobao(vec3 c)\n    {\n        vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n        k = mix(vec4(c.bg, k.wz), vec4(c.gb, k.xy), step(c.b, c.g));\n        k = mix(vec4(k.xyw, c.r), vec4(c.r, k.yzx), step(k.x, c.r));\n      float d = k.x - min( k.w, k.y );\n      float e = 1.0e-10;\n      return vec3( abs(k.z + (k.w - k.y) / (6.0 * d + e)), d / (k.x + e), k.x);\n    }\n    vec3 HSVOffset(vec3 c)\n    {\n        vec3 hsv = RGB2HSV_taobao(c);\n        return HSV2RGB_taobao(vec3(clamp(hsv.x+u_HSV_offset.x,0.0,1.0),clamp(hsv.y+u_HSV_offset.y,0.0,1.0),clamp(hsv.z+u_HSV_offset.z,0.0,1.0)));\n    }\n#endif\n  vec4 frag ()\n  {\n    vec3 albedo = texture2D(u_albedo_map, v_Texcoord0).rgb;\n    #if HSVOFFSET\n        albedo = HSVOffset(albedo);\n    #endif\n    #if TEXTURE0\n        vec4 texture0 = texture2D(u_texture0, vec2((v_Texcoord0.x - u_texture0_ST.x) / u_texture0_ST.w, (v_Texcoord0.y - u_texture0_ST.y) / u_texture0_ST.z));\n        #if TEXTURE0_COLOR1\n            albedo = mix(albedo, u_texture0_color1.rgb, vec3(texture0.r));\n        #endif\n        #if TEXTURE0_COLOR2\n            albedo = mix(albedo, u_texture0_color2.rgb, vec3(texture0.g));\n            albedo = mix(albedo, u_texture0_color1.rgb, vec3(texture0.r));\n        #endif\n        #if !TEXTURE0_COLOR1 && !TEXTURE0_COLOR2\n            albedo = mix(albedo, texture0.rgb.rgb, vec3(texture0.a));\n        #endif\n    #endif\n    #if TEXTURE1\n        vec4 texture1 = texture2D(u_texture1, vec2((v_Texcoord0.x - u_texture1_ST.x) / u_texture1_ST.w, (v_Texcoord0.y - u_texture1_ST.y) / u_texture1_ST.z));\n        #if TEXTURE1_COLOR1\n            albedo = mix(albedo, u_texture1_color1.rgb, vec3(texture1.r));\n        #endif\n        #if TEXTURE1_COLOR2\n            albedo = mix(albedo, u_texture1_color2.rgb, vec3(texture1.g));\n            albedo = mix(albedo, u_texture1_color1.rgb, vec3(texture1.r));\n        #endif\n        #if !TEXTURE1_COLOR1 && !TEXTURE1_COLOR2\n            albedo = mix(albedo, texture1.rgb, vec3(texture1.a));\n        #endif\n    #endif\n    #if TEXTURE2\n        vec4 texture2 = texture2D(u_texture2, vec2((v_Texcoord0.x - u_texture2_ST.x) / u_texture2_ST.w, (v_Texcoord0.y - u_texture2_ST.y) / u_texture2_ST.z));\n        #if TEXTURE2_COLOR1\n            albedo = mix(albedo, u_texture2_color1.rgb, vec3(texture2.r));\n        #endif\n        #if TEXTURE2_COLOR2\n            albedo = mix(albedo, u_texture2_color2.rgb, vec3(texture2.g));\n            albedo = mix(albedo, u_texture2_color1.rgb, vec3(texture2.r));\n        #endif\n        #if !TEXTURE2_COLOR1 && !TEXTURE2_COLOR2\n            albedo = mix(albedo, texture2.rgb, vec3(texture2.a));\n        #endif\n    #endif\n    #if TEXTURE3\n        vec4 texture3 = texture2D(u_texture3, vec2((v_Texcoord0.x - u_texture3_ST.x) / u_texture3_ST.w, (v_Texcoord0.y - u_texture3_ST.y) / u_texture3_ST.z));\n        #if TEXTURE3_COLOR1\n            albedo = mix(albedo, u_texture3_color1.rgb, vec3(texture3.r));\n        #endif\n        #if TEXTURE3_COLOR2\n            albedo = mix(albedo, u_texture3_color2.rgb, vec3(texture3.g));\n            albedo = mix(albedo, u_texture3_color1.rgb, vec3(texture3.r));\n        #endif\n        #if !TEXTURE3_COLOR1&& !TEXTURE3_COLOR2\n            albedo = mix(albedo, texture3.rgb, vec3(texture3.a));\n        #endif\n    #endif\n    #if TEXTURE4\n        vec4 texture4 = texture2D(u_texture4, vec2((v_Texcoord0.x - u_texture4_ST.x) / u_texture4_ST.w, (v_Texcoord0.y - u_texture4_ST.y) / u_texture4_ST.z));\n        #if TEXTURE4_COLOR1\n            albedo = mix(albedo, u_texture4_color1.rgb, vec3(texture4.r));\n        #endif\n        #if TEXTURE4_COLOR2\n            albedo = mix(albedo, u_texture4_color2.rgb, vec3(texture4.g));\n            albedo = mix(albedo, u_texture4_color1.rgb, vec3(texture4.r));\n        #endif\n        #if !TEXTURE4_COLOR1 && !TEXTURE4_COLOR2\n            albedo = mix(albedo, texture4.rgb, vec3(texture4.a));\n        #endif\n    #endif\n    #if TEXTURE5\n        vec4 texture5 = texture2D(u_texture5, vec2((v_Texcoord0.x - u_texture5_ST.x) / u_texture5_ST.w, (v_Texcoord0.y - u_texture5_ST.y) / u_texture5_ST.z));\n        #if TEXTURE5_COLOR1\n            albedo = mix(albedo, u_texture5_color1.rgb, vec3(texture5.r));\n        #endif\n        #if TEXTURE5_COLOR2\n            albedo = mix(albedo, u_texture5_color2.rgb, vec3(texture5.g));\n            albedo = mix(albedo, u_texture5_color1.rgb, vec3(texture5.r));\n        #endif\n        #if !TEXTURE5_COLOR1 && !TEXTURE5_COLOR2\n            albedo = mix(albedo, texture5.rgb, vec3(texture5.a));\n        #endif\n    #endif\n    #if TEXTURE6\n        vec4 texture6 = texture2D(u_texture6, vec2((v_Texcoord0.x - u_texture6_ST.x) / u_texture6_ST.w, (v_Texcoord0.y - u_texture6_ST.y) / u_texture6_ST.z));\n        #if TEXTURE6_COLOR1\n            albedo = mix(albedo, u_texture6_color1.rgb, vec3(texture6.r));\n        #endif\n        #if TEXTURE6_COLOR2\n            albedo = mix(albedo, u_texture6_color2.rgb, vec3(texture6.g));\n            albedo = mix(albedo, u_texture6_color1.rgb, vec3(texture6.r));\n        #endif\n        #if !TEXTURE6_COLOR1 && !TEXTURE6_COLOR2\n            albedo = mix(albedo, texture6.rgb, vec3(texture6.a));\n        #endif\n    #endif\n    return vec4(albedo, 1.0);;\n  }\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":154,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":126}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"TEXTURE0","type":"boolean"},{"name":"TEXTURE1","type":"boolean"},{"name":"TEXTURE2","type":"boolean"},{"name":"TEXTURE3","type":"boolean"},{"name":"TEXTURE4","type":"boolean"},{"name":"TEXTURE5","type":"boolean"},{"name":"TEXTURE6","type":"boolean"},{"name":"HSVOFFSET","type":"boolean"},{"name":"TEXTURE0_COLOR1","type":"boolean"},{"name":"TEXTURE0_COLOR2","type":"boolean"},{"name":"TEXTURE1_COLOR1","type":"boolean"},{"name":"TEXTURE1_COLOR2","type":"boolean"},{"name":"TEXTURE2_COLOR1","type":"boolean"},{"name":"TEXTURE2_COLOR2","type":"boolean"},{"name":"TEXTURE3_COLOR1","type":"boolean"},{"name":"TEXTURE3_COLOR2","type":"boolean"},{"name":"TEXTURE4_COLOR1","type":"boolean"},{"name":"TEXTURE4_COLOR2","type":"boolean"},{"name":"TEXTURE5_COLOR1","type":"boolean"},{"name":"TEXTURE5_COLOR2","type":"boolean"},{"name":"TEXTURE6_COLOR1","type":"boolean"},{"name":"TEXTURE6_COLOR2","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../sdk/res/mat/texture_merge|textureMerge-vs:vert|textureMerge-fs:frag","rasterizerState":{"cullMode":2},"blendState":{"targets":[{"blend":false,"blendSrc":0,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":3,"depthTest":true,"depthWrite":true},"properties":{"u_albedo_map":{"value":"grey","type":28},"u_position_ST":{"type":16,"value":[1,1,0,0]},"u_texture0":{"value":"white","type":28},"u_texture0_ST":{"type":16,"value":[1,1,0,0]},"u_texture0_color1":{"type":16,"value":[0,0,0,0]},"u_texture0_color2":{"type":16,"value":[0,0,0,0]},"u_texture1":{"value":"white","type":28},"u_texture1_ST":{"type":16,"value":[1,1,0,0]},"u_texture1_color1":{"type":16,"value":[0,0,0,0]},"u_texture1_color2":{"type":16,"value":[0,0,0,0]},"u_texture2":{"value":"white","type":28},"u_texture2_ST":{"type":16,"value":[1,1,0,0]},"u_texture2_color1":{"type":16,"value":[0,0,0,0]},"u_texture2_color2":{"type":16,"value":[0,0,0,0]},"u_texture3":{"value":"white","type":28},"u_texture3_ST":{"type":16,"value":[1,1,0,0]},"u_texture3_color1":{"type":16,"value":[0,0,0,0]},"u_texture3_color2":{"type":16,"value":[0,0,0,0]},"u_texture4":{"value":"white","type":28},"u_texture4_ST":{"type":16,"value":[1,1,0,0]},"u_texture4_color1":{"type":16,"value":[0,0,0,0]},"u_texture4_color2":{"type":16,"value":[0,0,0,0]},"u_texture5":{"value":"white","type":28},"u_texture5_ST":{"type":16,"value":[1,1,0,0]},"u_texture5_color1":{"type":16,"value":[0,0,0,0]},"u_texture5_color2":{"type":16,"value":[0,0,0,0]},"u_texture6":{"value":"white","type":28},"u_texture6_ST":{"type":16,"value":[1,1,0,0]},"u_texture6_color1":{"type":16,"value":[0,0,0,0]},"u_texture6_color2":{"type":16,"value":[0,0,0,0]},"u_HSV_offset":{"type":16,"value":[0,0,0,0]}}}]}]]],0,0,[],[],[]]]]
